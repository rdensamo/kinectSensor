#!/usr/bin/env python
# Above line indicates script is executed as a Python script
# This should be run using Python 2
# This ros publisher will publish the rosbag pointcloud data

# Must import rospy when writing a ROS Node
import rospy
import rosbag
# Allows us to reuse the std_msg/String message type for publishing
from std_msgs.msg import String

def pubROSBAG():

    # Get rosbag
    bag = rosbag.Bag('/home/vader/CSE280/ptcdata.bag');

    # script for read rosbag data
    for (topic, msg, t) in bag.read_messages():
	print(topic, msg, t)

    # Declares what topic your node is publishing to and the message type
    # Queue size limits the amount of queues messages if subscriber is not recieving messages
    # fast enough
    pub = rospy.Publisher('chatter', String, queue_size=10)
    # Tells rospy the name of the node
    # rospy won't be able to communicate with master until this happens
    # anonymous=True ensures node has a unique name
    rospy.init_node('pubROSBAG', anonymous=True)
    # loops at a desired rate
    rate = rospy.Rate(10) # 10hz
    # shutdown checks for CTRL-C and otherwise loops
    while not rospy.is_shutdown():
        hello_str = "hello world %s" % rospy.get_time()
        # log for debugging
        rospy.loginfo(hello_str)
        # publishes a string to topic
        pub.publish(hello_str)
        # sleeps to maintain desieed rate
        rate.sleep()


# Catches rospy exception than can be thrown by sleep and rate
# when CTRL-C is pressed or node is shutodwn
if __name__ == '__main__':
    try:
        pubROSBAG()
    except rospy.ROSInterruptException:
        pass
